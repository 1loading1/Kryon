// File: Mac_Ctrl.v
// Generated by MyHDL 0.10
// Date: Mon Jul 23 09:35:24 2018


`timescale 1ns/10ps

module Mac_Ctrl (
    clk,
    TxEn,
    TxErr,
    TxData,
    RxEn,
    RxData,
    SendEn,
    Dkey2,
    Clear,
    DataLength,
    GapLength,
    TxCNT,
    RxCNT,
    TxLimit,
    FrameRate,
    Ram_MacText_we,
    Ram_MacText_addr,
    Ram_MacText_din,
    Ram_MacText_dout
);


input clk;
output TxEn;
reg TxEn;
output TxErr;
reg TxErr;
output [7:0] TxData;
reg [7:0] TxData;
input RxEn;
input [7:0] RxData;
input SendEn;
input Dkey2;
input Clear;
input [15:0] DataLength;
input [15:0] GapLength;
output [23:0] TxCNT;
reg [23:0] TxCNT;
output [23:0] RxCNT;
reg [23:0] RxCNT;
input [23:0] TxLimit;
output [7:0] FrameRate;
reg [7:0] FrameRate;
output Ram_MacText_we;
reg Ram_MacText_we;
output [10:0] Ram_MacText_addr;
reg [10:0] Ram_MacText_addr;
output [8:0] Ram_MacText_din;
reg [8:0] Ram_MacText_din;
input [8:0] Ram_MacText_dout;

wire [47:0] SourceMac;
wire [47:0] DestinationMAC;
wire [31:0] SourceIP;
wire [31:0] DestinationIP;
reg SendDataEn = 0;
reg TxIDLE = 0;
reg ReceiveEn = 0;
reg [7:0] Rx_IP_Protocol = 0;
reg [7:0] ReceiveData = 0;
wire [7:0] Tx_IP_Protocol;
reg [31:0] RxDestinationIP = 0;
reg [31:0] RxSourceIP = 0;
reg [47:0] RxDestinationMAC = 0;
reg [47:0] RxSourceMac = 0;
reg [15:0] Tx_desPort = 57766;
wire [15:0] Tx_srcPort;
reg [15:0] Rx_desPort = 0;
reg [15:0] Rx_srcPort = 0;
reg [15:0] RxIP_Total_Length = 0;
reg [15:0] RxEtherType = 0;
wire [15:0] EtherType;
wire [15:0] Tx_UDP_Length;
reg [5:0] TxTextPointer = 1;
reg TxSendEn = 0;
reg [15:0] TxGapLength = 0;
reg TxEnd = 0;
reg [15:0] TxDataLength = 0;
reg [7:0] SendData = 0;
reg [15:0] Rx_UDP_Length = 0;
reg [5:0] RxTextPointer = 0;
reg RxEnd = 0;
reg [15:0] RxDataLength = 0;
reg PixTxing = 0;
reg PicTxEn = 0;
reg [15:0] PicTxDataLength = 0;
reg [7:0] PicTxData = 0;
reg [15:0] PicGapLength = 0;
wire [15:0] IP_Total_Length;
reg Rx_Ram_we = 0;
reg [10:0] Rx_Ram_addr = 0;
reg [8:0] Rx_Ram_din = 0;
reg Tx_Ram_we = 0;
reg [10:0] Tx_Ram_addr = 0;
reg [8:0] Tx_Ram_din = 0;
reg [31:0] Mac_Tx0_CrcNext = 33'hffffffff;
reg [7:0] Mac_Tx0_UDPHeader = 0;
reg Mac_Tx0_TxEnReg1 = 0;
reg Mac_Tx0_TxEnReg = 0;
reg [7:0] Mac_Tx0_TxDataReg = 0;
reg [7:0] Mac_Tx0_StateReg = 8'b00000001;
reg [7:0] Mac_Tx0_State = 8'b00000001;
reg [7:0] Mac_Tx0_PktData = 0;
reg [31:0] Mac_Tx0_IPHeader_CheckSum = 0;
reg [7:0] Mac_Tx0_IPHeader = 0;
reg [7:0] Mac_Tx0_EthHeader = 0;
reg Mac_Tx0_CrcReset = 0;
reg Mac_Tx0_CrcEnable = 0;
reg [31:0] Mac_Tx0_Crc = 33'hffffffff;
reg [11:0] Mac_Tx0_CNT = 0;
reg [7:0] Mac_Tx0_ARP_Data = 0;
reg [7:0] Mac_Tx0_CRC320_Data = 0;
reg [31:0] Mac_Tx0_CRC320_Crc = 33'hffffffff;
reg [6:0] Mac_Rx0_State = 7'b0000001;
reg [31:0] Mac_Rx0_RxText = 0;
reg Mac_Rx0_RxEnReg = 0;
reg [7:0] Mac_Rx0_RxDataReg = 0;
reg [11:0] Mac_Rx0_CNT = 0;
reg TxPic0_Rect1OEn = 0;
reg [11:0] TxPic0_Y = 0;
reg [11:0] TxPic0_X = 0;
reg [15:0] TxPic0_TxingCNT = 0;
reg [4:0] TxPic0_State = 5'b00001;
reg [15:0] TxPic0_PktCNT = 0;
reg [7:0] TxPic0_FrameRateCNT = 0;
reg [31:0] TxPic0_FrameCNT = 0;
reg [1:0] TxPic0_EndPktCNT = 0;
reg [15:0] TxPic0_EndCNT = 0;
reg [1:0] TxPic0_CNTy3 = 0;
reg [1:0] TxPic0_CNTx3 = 0;
reg [27:0] TxPic0_CNT1S = 0;
reg [11:0] TxPic0_Rect1Size_W = 1024;
reg [7:0] TxPic0_Rect1OColor_R = 0;
reg [7:0] TxPic0_Rect1OColor_G = 0;
reg [7:0] TxPic0_Rect1OColor_B = 0;
reg [11:0] TxPic0_Rectangle2_y = 0;
reg [11:0] TxPic0_Rectangle2_x = 0;
reg TxPic0_Rectangle2_NoFill = 0;
wire [11:0] TxPic0_Rectangle2_Size_H;
wire [7:0] TxPic0_Rectangle2_LineColor_R;
wire [7:0] TxPic0_Rectangle2_LineColor_G;
wire [7:0] TxPic0_Rectangle2_LineColor_B;
wire [7:0] TxPic0_Rectangle2_FillColor_R;
wire [7:0] TxPic0_Rectangle2_FillColor_G;
wire [7:0] TxPic0_Rectangle2_FillColor_B;
wire [11:0] TxPic0_Rectangle2_Loc_x;
wire [11:0] TxPic0_Rectangle2_Loc_y;

assign SourceMac = 48'd187723572702975;
assign DestinationMAC = 48'd264403989595515;
assign SourceIP = 32'd3232235527;
assign DestinationIP = 32'd3232235611;
assign Tx_IP_Protocol = 8'd17;
assign Tx_srcPort = 16'd57766;
assign EtherType = 16'd2048;
assign TxPic0_Rectangle2_Size_H = 12'd512;
assign TxPic0_Rectangle2_LineColor_R = 8'd255;
assign TxPic0_Rectangle2_LineColor_G = 8'd0;
assign TxPic0_Rectangle2_LineColor_B = 8'd255;
assign TxPic0_Rectangle2_FillColor_R = 8'd0;
assign TxPic0_Rectangle2_FillColor_G = 8'd0;
assign TxPic0_Rectangle2_FillColor_B = 8'd0;
assign TxPic0_Rectangle2_Loc_x = 12'd0;
assign TxPic0_Rectangle2_Loc_y = 12'd0;

function integer MYHDL31_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL51_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL31_ToChar = b;
    disable MYHDL51_RETURN;
end
endfunction

function integer MYHDL32_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL52_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL32_ToChar = b;
    disable MYHDL52_RETURN;
end
endfunction

function integer MYHDL33_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL53_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL33_ToChar = b;
    disable MYHDL53_RETURN;
end
endfunction

function integer MYHDL34_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL54_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL34_ToChar = b;
    disable MYHDL54_RETURN;
end
endfunction

function integer MYHDL35_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL55_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL35_ToChar = b;
    disable MYHDL55_RETURN;
end
endfunction

function integer MYHDL36_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL56_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL36_ToChar = b;
    disable MYHDL56_RETURN;
end
endfunction

function integer MYHDL39_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL57_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL39_ToChar = b;
    disable MYHDL57_RETURN;
end
endfunction

function integer MYHDL40_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL58_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL40_ToChar = b;
    disable MYHDL58_RETURN;
end
endfunction

function integer MYHDL41_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL59_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL41_ToChar = b;
    disable MYHDL59_RETURN;
end
endfunction

function integer MYHDL42_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL60_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL42_ToChar = b;
    disable MYHDL60_RETURN;
end
endfunction

function integer MYHDL43_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL61_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL43_ToChar = b;
    disable MYHDL61_RETURN;
end
endfunction

function integer MYHDL44_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL62_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL44_ToChar = b;
    disable MYHDL62_RETURN;
end
endfunction

function integer MYHDL45_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL63_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL45_ToChar = b;
    disable MYHDL63_RETURN;
end
endfunction

function integer MYHDL46_ToChar;
    input a;
    integer a;
    integer b;
begin: MYHDL64_RETURN
    b = 0;
    if ((a <= 9)) begin
        b = (a + 17);
    end
    else begin
        b = (a + 24);
    end
    MYHDL46_ToChar = b;
    disable MYHDL64_RETURN;
end
endfunction


always @(posedge clk) begin: MAC_CTRL_SEQ
    if ((Clear == 1)) begin
        TxCNT <= 0;
        RxCNT <= 0;
    end
    else begin
        if (TxEnd) begin
            TxCNT <= (TxCNT + 1);
        end
        if (RxEnd) begin
            RxCNT <= (RxCNT + 1);
        end
    end
    if ((Clear == 1)) begin
        TxTextPointer <= 1;
        RxTextPointer <= 0;
    end
    else if ((TxEnd == 1)) begin
        TxTextPointer <= (TxTextPointer + 2);
    end
    else if ((RxEnd == 1)) begin
        RxTextPointer <= (RxTextPointer + 2);
    end
    if (((Rx_Ram_we == 1) && RxEn)) begin
        Ram_MacText_we <= Rx_Ram_we;
        Ram_MacText_addr <= (Rx_Ram_addr + (RxTextPointer << 5));
        Ram_MacText_din <= Rx_Ram_din;
    end
    else if ((Tx_Ram_we == 1)) begin
        Ram_MacText_we <= Tx_Ram_we;
        Ram_MacText_addr <= (Tx_Ram_addr + (TxTextPointer << 5));
        Ram_MacText_din <= Tx_Ram_din;
    end
    else begin
        Ram_MacText_we <= 0;
    end
end


always @(SendEn, TxLimit, Rx_UDP_Length, PixTxing, PicTxEn, Dkey2, TxCNT, DataLength, GapLength, PicTxDataLength, PicTxData, PicGapLength) begin: MAC_CTRL_COMB
    TxSendEn = (SendEn || (Dkey2 && ($signed({1'b0, TxCNT}) < ($signed({1'b0, TxLimit}) - 1))) || PicTxEn);
    RxDataLength = (Rx_UDP_Length - 8);
    if (PixTxing) begin
        TxDataLength = PicTxDataLength;
        TxGapLength = PicGapLength;
        SendData = PicTxData;
    end
    else begin
        TxDataLength = DataLength;
        TxGapLength = GapLength;
        SendData = 1;
    end
end



assign Tx_UDP_Length = (TxDataLength + 8);
assign IP_Total_Length = ((TxDataLength + 8) + 20);


always @(Mac_Tx0_TxDataReg) begin: MAC_CTRL_MAC_TX0_CRC320_RDATA
    Mac_Tx0_CRC320_Data[0] = Mac_Tx0_TxDataReg[7];
    Mac_Tx0_CRC320_Data[1] = Mac_Tx0_TxDataReg[6];
    Mac_Tx0_CRC320_Data[2] = Mac_Tx0_TxDataReg[5];
    Mac_Tx0_CRC320_Data[3] = Mac_Tx0_TxDataReg[4];
    Mac_Tx0_CRC320_Data[4] = Mac_Tx0_TxDataReg[3];
    Mac_Tx0_CRC320_Data[5] = Mac_Tx0_TxDataReg[2];
    Mac_Tx0_CRC320_Data[6] = Mac_Tx0_TxDataReg[1];
    Mac_Tx0_CRC320_Data[7] = Mac_Tx0_TxDataReg[0];
end


always @(Mac_Tx0_CRC320_Crc, Mac_Tx0_CRC320_Data) begin: MAC_CTRL_MAC_TX0_CRC320_COMB1
    Mac_Tx0_CrcNext[0] = (((Mac_Tx0_CRC320_Crc[24] ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[6]);
    Mac_Tx0_CrcNext[1] = (((((((Mac_Tx0_CRC320_Crc[24] ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[6]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[2] = (((((((((Mac_Tx0_CRC320_Crc[24] ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[6]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[3] = (((((((Mac_Tx0_CRC320_Crc[25] ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[4] = (((((((((Mac_Tx0_CRC320_Crc[24] ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[6]);
    Mac_Tx0_CrcNext[5] = (((((((((((((Mac_Tx0_CRC320_Crc[24] ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[5]) ^ Mac_Tx0_CRC320_Data[6]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[6] = (((((((((((Mac_Tx0_CRC320_Crc[25] ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[5]) ^ Mac_Tx0_CRC320_Data[6]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[7] = (((((((((Mac_Tx0_CRC320_Crc[24] ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[5]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[8] = ((((((((Mac_Tx0_CRC320_Crc[0] ^ Mac_Tx0_CRC320_Crc[24]) ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[4]);
    Mac_Tx0_CrcNext[9] = ((((((((Mac_Tx0_CRC320_Crc[1] ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[5]);
    Mac_Tx0_CrcNext[10] = ((((((((Mac_Tx0_CRC320_Crc[2] ^ Mac_Tx0_CRC320_Crc[24]) ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[5]);
    Mac_Tx0_CrcNext[11] = ((((((((Mac_Tx0_CRC320_Crc[3] ^ Mac_Tx0_CRC320_Crc[24]) ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[4]);
    Mac_Tx0_CrcNext[12] = ((((((((((((Mac_Tx0_CRC320_Crc[4] ^ Mac_Tx0_CRC320_Crc[24]) ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[5]) ^ Mac_Tx0_CRC320_Data[6]);
    Mac_Tx0_CrcNext[13] = ((((((((((((Mac_Tx0_CRC320_Crc[5] ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[5]) ^ Mac_Tx0_CRC320_Data[6]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[14] = ((((((((((Mac_Tx0_CRC320_Crc[6] ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[6]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[15] = ((((((((Mac_Tx0_CRC320_Crc[7] ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[5]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[16] = ((((((Mac_Tx0_CRC320_Crc[8] ^ Mac_Tx0_CRC320_Crc[24]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[5]);
    Mac_Tx0_CrcNext[17] = ((((((Mac_Tx0_CRC320_Crc[9] ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[5]) ^ Mac_Tx0_CRC320_Data[6]);
    Mac_Tx0_CrcNext[18] = ((((((Mac_Tx0_CRC320_Crc[10] ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[6]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[19] = ((((Mac_Tx0_CRC320_Crc[11] ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[20] = ((Mac_Tx0_CRC320_Crc[12] ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Data[4]);
    Mac_Tx0_CrcNext[21] = ((Mac_Tx0_CRC320_Crc[13] ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Data[5]);
    Mac_Tx0_CrcNext[22] = ((Mac_Tx0_CRC320_Crc[14] ^ Mac_Tx0_CRC320_Crc[24]) ^ Mac_Tx0_CRC320_Data[0]);
    Mac_Tx0_CrcNext[23] = ((((((Mac_Tx0_CRC320_Crc[15] ^ Mac_Tx0_CRC320_Crc[24]) ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[6]);
    Mac_Tx0_CrcNext[24] = ((((((Mac_Tx0_CRC320_Crc[16] ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[25] = ((((Mac_Tx0_CRC320_Crc[17] ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[3]);
    Mac_Tx0_CrcNext[26] = ((((((((Mac_Tx0_CRC320_Crc[18] ^ Mac_Tx0_CRC320_Crc[24]) ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Data[0]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[6]);
    Mac_Tx0_CrcNext[27] = ((((((((Mac_Tx0_CRC320_Crc[19] ^ Mac_Tx0_CRC320_Crc[25]) ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[1]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[5]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[28] = ((((((Mac_Tx0_CRC320_Crc[20] ^ Mac_Tx0_CRC320_Crc[26]) ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Data[2]) ^ Mac_Tx0_CRC320_Data[5]) ^ Mac_Tx0_CRC320_Data[6]);
    Mac_Tx0_CrcNext[29] = ((((((Mac_Tx0_CRC320_Crc[21] ^ Mac_Tx0_CRC320_Crc[27]) ^ Mac_Tx0_CRC320_Crc[30]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[3]) ^ Mac_Tx0_CRC320_Data[6]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[30] = ((((Mac_Tx0_CRC320_Crc[22] ^ Mac_Tx0_CRC320_Crc[28]) ^ Mac_Tx0_CRC320_Crc[31]) ^ Mac_Tx0_CRC320_Data[4]) ^ Mac_Tx0_CRC320_Data[7]);
    Mac_Tx0_CrcNext[31] = ((Mac_Tx0_CRC320_Crc[23] ^ Mac_Tx0_CRC320_Crc[29]) ^ Mac_Tx0_CRC320_Data[5]);
end


always @(posedge clk) begin: MAC_CTRL_MAC_TX0_CRC320_SEQ
    if (Mac_Tx0_CrcReset) begin
        Mac_Tx0_CRC320_Crc <= 33'hffffffff;
    end
    else if (Mac_Tx0_CrcEnable) begin
        Mac_Tx0_CRC320_Crc <= Mac_Tx0_CrcNext;
    end
end


always @(Mac_Tx0_CRC320_Crc) begin: MAC_CTRL_MAC_TX0_CRC320_COMB2
    Mac_Tx0_Crc[0] = (!Mac_Tx0_CRC320_Crc[7]);
    Mac_Tx0_Crc[1] = (!Mac_Tx0_CRC320_Crc[6]);
    Mac_Tx0_Crc[2] = (!Mac_Tx0_CRC320_Crc[5]);
    Mac_Tx0_Crc[3] = (!Mac_Tx0_CRC320_Crc[4]);
    Mac_Tx0_Crc[4] = (!Mac_Tx0_CRC320_Crc[3]);
    Mac_Tx0_Crc[5] = (!Mac_Tx0_CRC320_Crc[2]);
    Mac_Tx0_Crc[6] = (!Mac_Tx0_CRC320_Crc[1]);
    Mac_Tx0_Crc[7] = (!Mac_Tx0_CRC320_Crc[0]);
    Mac_Tx0_Crc[8] = (!Mac_Tx0_CRC320_Crc[15]);
    Mac_Tx0_Crc[9] = (!Mac_Tx0_CRC320_Crc[14]);
    Mac_Tx0_Crc[10] = (!Mac_Tx0_CRC320_Crc[13]);
    Mac_Tx0_Crc[11] = (!Mac_Tx0_CRC320_Crc[12]);
    Mac_Tx0_Crc[12] = (!Mac_Tx0_CRC320_Crc[11]);
    Mac_Tx0_Crc[13] = (!Mac_Tx0_CRC320_Crc[10]);
    Mac_Tx0_Crc[14] = (!Mac_Tx0_CRC320_Crc[9]);
    Mac_Tx0_Crc[15] = (!Mac_Tx0_CRC320_Crc[8]);
    Mac_Tx0_Crc[16] = (!Mac_Tx0_CRC320_Crc[23]);
    Mac_Tx0_Crc[17] = (!Mac_Tx0_CRC320_Crc[22]);
    Mac_Tx0_Crc[18] = (!Mac_Tx0_CRC320_Crc[21]);
    Mac_Tx0_Crc[19] = (!Mac_Tx0_CRC320_Crc[20]);
    Mac_Tx0_Crc[20] = (!Mac_Tx0_CRC320_Crc[19]);
    Mac_Tx0_Crc[21] = (!Mac_Tx0_CRC320_Crc[18]);
    Mac_Tx0_Crc[22] = (!Mac_Tx0_CRC320_Crc[17]);
    Mac_Tx0_Crc[23] = (!Mac_Tx0_CRC320_Crc[16]);
    Mac_Tx0_Crc[24] = (!Mac_Tx0_CRC320_Crc[31]);
    Mac_Tx0_Crc[25] = (!Mac_Tx0_CRC320_Crc[30]);
    Mac_Tx0_Crc[26] = (!Mac_Tx0_CRC320_Crc[29]);
    Mac_Tx0_Crc[27] = (!Mac_Tx0_CRC320_Crc[28]);
    Mac_Tx0_Crc[28] = (!Mac_Tx0_CRC320_Crc[27]);
    Mac_Tx0_Crc[29] = (!Mac_Tx0_CRC320_Crc[26]);
    Mac_Tx0_Crc[30] = (!Mac_Tx0_CRC320_Crc[25]);
    Mac_Tx0_Crc[31] = (!Mac_Tx0_CRC320_Crc[24]);
end


always @(posedge clk) begin: MAC_CTRL_MAC_TX0_SEQ
    if ((Mac_Tx0_State == 8'b00000001)) begin
        TxIDLE <= 1;
        Mac_Tx0_CNT <= 0;
        Mac_Tx0_EthHeader <= 0;
        Mac_Tx0_IPHeader <= 0;
        Mac_Tx0_UDPHeader <= 0;
        Mac_Tx0_TxEnReg <= 0;
        TxErr <= 0;
        Tx_Ram_we <= 0;
        Tx_Ram_addr <= 0;
        Tx_Ram_din <= 0;
        TxEnd <= 0;
        Mac_Tx0_CrcReset <= 0;
        SendDataEn <= 0;
        Mac_Tx0_IPHeader_CheckSum <= 0;
        if (TxSendEn) begin
            Mac_Tx0_State <= 8'b00000010;
            TxIDLE <= 0;
        end
    end
    if ((Mac_Tx0_State == 8'b00000010)) begin
        if (($signed({1'b0, Mac_Tx0_CNT}) < (22 - 1))) begin
            Mac_Tx0_CNT <= (Mac_Tx0_CNT + 1);
        end
        else begin
            Mac_Tx0_CNT <= 0;
            case (EtherType)
                'h800: begin
                    Mac_Tx0_State <= 8'b00001000;
                end
                'h806: begin
                    Mac_Tx0_State <= 8'b00000100;
                end
                default: begin
                    TxErr <= 1;
                    Mac_Tx0_State <= 8'b10000000;
                end
            endcase
        end
        if ((Mac_Tx0_CNT == 0)) begin
            Mac_Tx0_TxEnReg <= 1;
        end
        if ((Mac_Tx0_CNT <= 6)) begin
            Mac_Tx0_EthHeader <= 85;
        end
        if ((Mac_Tx0_CNT == 7)) begin
            Mac_Tx0_EthHeader <= 213;
        end
        if ((Mac_Tx0_CNT == 8)) begin
            Mac_Tx0_EthHeader <= DestinationMAC[48-1:40];
        end
        if ((Mac_Tx0_CNT == 9)) begin
            Mac_Tx0_EthHeader <= DestinationMAC[40-1:32];
        end
        if ((Mac_Tx0_CNT == 10)) begin
            Mac_Tx0_EthHeader <= DestinationMAC[32-1:24];
        end
        if ((Mac_Tx0_CNT == 11)) begin
            Mac_Tx0_EthHeader <= DestinationMAC[24-1:16];
        end
        if ((Mac_Tx0_CNT == 12)) begin
            Mac_Tx0_EthHeader <= DestinationMAC[16-1:8];
        end
        if ((Mac_Tx0_CNT == 13)) begin
            Mac_Tx0_EthHeader <= DestinationMAC[8-1:0];
        end
        if ((Mac_Tx0_CNT == 14)) begin
            Mac_Tx0_EthHeader <= SourceMac[48-1:40];
        end
        if ((Mac_Tx0_CNT == 15)) begin
            Mac_Tx0_EthHeader <= SourceMac[40-1:32];
        end
        if ((Mac_Tx0_CNT == 16)) begin
            Mac_Tx0_EthHeader <= SourceMac[32-1:24];
        end
        if ((Mac_Tx0_CNT == 17)) begin
            Mac_Tx0_EthHeader <= SourceMac[24-1:16];
        end
        if ((Mac_Tx0_CNT == 18)) begin
            Mac_Tx0_EthHeader <= SourceMac[16-1:8];
        end
        if ((Mac_Tx0_CNT == 19)) begin
            Mac_Tx0_EthHeader <= SourceMac[8-1:0];
        end
        if ((Mac_Tx0_CNT == 20)) begin
            Mac_Tx0_EthHeader <= EtherType[16-1:8];
        end
        if ((Mac_Tx0_CNT == 21)) begin
            Mac_Tx0_EthHeader <= EtherType[8-1:0];
        end
        if ((Mac_Tx0_CNT == 1)) begin
            Tx_Ram_din <= 53;
        end
        if ((Mac_Tx0_CNT == 2)) begin
            Tx_Ram_din <= 89;
        end
        if ((Mac_Tx0_CNT == 3)) begin
            Tx_Ram_din <= 27;
        end
        if (((Mac_Tx0_CNT >= 1) && (Mac_Tx0_CNT <= 3))) begin
            Tx_Ram_we <= 1;
            if ((Mac_Tx0_CNT > 1)) begin
                Tx_Ram_addr <= (Tx_Ram_addr + 1);
            end
        end
        else begin
            Tx_Ram_we <= 0;
        end
        if ((Mac_Tx0_CNT == 9)) begin
            Mac_Tx0_CrcEnable <= 1;
        end
    end
    if ((Mac_Tx0_State == 8'b00000100)) begin
        if (($signed({1'b0, Mac_Tx0_CNT}) < ((28 + 4) - 1))) begin
            Mac_Tx0_CNT <= (Mac_Tx0_CNT + 1);
        end
        else begin
            Mac_Tx0_CNT <= 0;
            Mac_Tx0_State <= 8'b10000000;
        end
        Mac_Tx0_ARP_Data <= 171;
        if ((Mac_Tx0_CNT == 1)) begin
            Tx_Ram_din <= 34;
        end
        if ((Mac_Tx0_CNT == 2)) begin
            Tx_Ram_din <= 51;
        end
        if ((Mac_Tx0_CNT == 3)) begin
            Tx_Ram_din <= 49;
        end
        if (((Mac_Tx0_CNT >= 1) && (Mac_Tx0_CNT <= 3))) begin
            Tx_Ram_we <= 1;
            Tx_Ram_addr <= (Tx_Ram_addr + 1);
        end
        else begin
            Tx_Ram_we <= 0;
        end
    end
    if ((Mac_Tx0_State == 8'b00001000)) begin
        Mac_Tx0_EthHeader <= 0;
        if (($signed({1'b0, Mac_Tx0_CNT}) < (20 - 1))) begin
            Mac_Tx0_CNT <= (Mac_Tx0_CNT + 1);
        end
        else begin
            Mac_Tx0_CNT <= 0;
            Mac_Tx0_State <= 8'b00010000;
        end
        if ((Mac_Tx0_CNT == 0)) begin
            Mac_Tx0_IPHeader <= 69;
        end
        if ((Mac_Tx0_CNT == 1)) begin
            Mac_Tx0_IPHeader <= 0;
        end
        if ((Mac_Tx0_CNT == 2)) begin
            Mac_Tx0_IPHeader <= IP_Total_Length[16-1:8];
        end
        if ((Mac_Tx0_CNT == 3)) begin
            Mac_Tx0_IPHeader <= IP_Total_Length[8-1:0];
        end
        if ((Mac_Tx0_CNT == 4)) begin
            Mac_Tx0_IPHeader <= 0;
        end
        if ((Mac_Tx0_CNT == 5)) begin
            Mac_Tx0_IPHeader <= 0;
        end
        if ((Mac_Tx0_CNT == 6)) begin
            Mac_Tx0_IPHeader <= 0;
        end
        if ((Mac_Tx0_CNT == 7)) begin
            Mac_Tx0_IPHeader <= 0;
        end
        if ((Mac_Tx0_CNT == 8)) begin
            Mac_Tx0_IPHeader <= 64;
        end
        if ((Mac_Tx0_CNT == 9)) begin
            Mac_Tx0_IPHeader <= Tx_IP_Protocol;
        end
        if ((Mac_Tx0_CNT == 10)) begin
            Mac_Tx0_IPHeader <= Mac_Tx0_IPHeader_CheckSum[16-1:8];
        end
        if ((Mac_Tx0_CNT == 11)) begin
            Mac_Tx0_IPHeader <= Mac_Tx0_IPHeader_CheckSum[8-1:0];
        end
        if ((Mac_Tx0_CNT == 12)) begin
            Mac_Tx0_IPHeader <= SourceIP[32-1:24];
        end
        if ((Mac_Tx0_CNT == 13)) begin
            Mac_Tx0_IPHeader <= SourceIP[24-1:16];
        end
        if ((Mac_Tx0_CNT == 14)) begin
            Mac_Tx0_IPHeader <= SourceIP[16-1:8];
        end
        if ((Mac_Tx0_CNT == 15)) begin
            Mac_Tx0_IPHeader <= SourceIP[8-1:0];
        end
        if ((Mac_Tx0_CNT == 16)) begin
            Mac_Tx0_IPHeader <= DestinationIP[32-1:24];
        end
        if ((Mac_Tx0_CNT == 17)) begin
            Mac_Tx0_IPHeader <= DestinationIP[24-1:16];
        end
        if ((Mac_Tx0_CNT == 18)) begin
            Mac_Tx0_IPHeader <= DestinationIP[16-1:8];
        end
        if ((Mac_Tx0_CNT == 19)) begin
            Mac_Tx0_IPHeader <= DestinationIP[8-1:0];
        end
        if ((Mac_Tx0_CNT == 0)) begin
            Mac_Tx0_IPHeader_CheckSum <= (((Mac_Tx0_IPHeader_CheckSum + 0) + 69) << 8);
        end
        if ((Mac_Tx0_CNT == 1)) begin
            Mac_Tx0_IPHeader_CheckSum <= (Mac_Tx0_IPHeader_CheckSum + IP_Total_Length);
        end
        if ((Mac_Tx0_CNT == 2)) begin
            Mac_Tx0_IPHeader_CheckSum <= ((Mac_Tx0_IPHeader_CheckSum + Tx_IP_Protocol) + 16384);
        end
        if ((Mac_Tx0_CNT == 3)) begin
            Mac_Tx0_IPHeader_CheckSum <= ((Mac_Tx0_IPHeader_CheckSum + SourceIP[32-1:16]) + SourceIP[16-1:0]);
        end
        if ((Mac_Tx0_CNT == 4)) begin
            Mac_Tx0_IPHeader_CheckSum <= ((Mac_Tx0_IPHeader_CheckSum + DestinationIP[32-1:16]) + DestinationIP[16-1:0]);
        end
        if ((Mac_Tx0_CNT == 5)) begin
            if ((Mac_Tx0_IPHeader_CheckSum[32-1:16] == 0)) begin
                Mac_Tx0_IPHeader_CheckSum[16-1:0] <= (~Mac_Tx0_IPHeader_CheckSum[16-1:0]);
            end
            else begin
                Mac_Tx0_IPHeader_CheckSum[16-1:0] <= (~(Mac_Tx0_IPHeader_CheckSum[16-1:0] + Mac_Tx0_IPHeader_CheckSum[32-1:16]));
            end
        end
        if ((Mac_Tx0_CNT == 10)) begin
            if ((Tx_IP_Protocol == 6)) begin
                Tx_Ram_din <= 53;
            end
            else begin
                if ((Tx_IP_Protocol == 17)) begin
                    Tx_Ram_din <= 54;
                end
                else begin
                    Tx_Ram_din <= 57;
                end
            end
        end
        if ((Mac_Tx0_CNT == 11)) begin
            if ((Tx_IP_Protocol == 6)) begin
                Tx_Ram_din <= 36;
            end
            else begin
                if ((Tx_IP_Protocol == 17)) begin
                    Tx_Ram_din <= 37;
                end
                else begin
                    Tx_Ram_din <= 57;
                end
            end
        end
        if (((Mac_Tx0_CNT >= 10) && (Mac_Tx0_CNT <= 11))) begin
            Tx_Ram_we <= 1;
            Tx_Ram_addr <= (Tx_Ram_addr + 1);
        end
        else begin
            Tx_Ram_we <= 0;
        end
    end
    if ((Mac_Tx0_State == 8'b00010000)) begin
        Mac_Tx0_IPHeader <= 0;
        if (($signed({1'b0, Mac_Tx0_CNT}) < (8 - 1))) begin
            Mac_Tx0_CNT <= (Mac_Tx0_CNT + 1);
        end
        else begin
            Mac_Tx0_CNT <= 0;
            Mac_Tx0_State <= 8'b00100000;
        end
        if ((Mac_Tx0_CNT == 0)) begin
            Mac_Tx0_UDPHeader <= Tx_srcPort[16-1:8];
        end
        if ((Mac_Tx0_CNT == 1)) begin
            Mac_Tx0_UDPHeader <= Tx_srcPort[8-1:0];
        end
        if ((Mac_Tx0_CNT == 2)) begin
            Mac_Tx0_UDPHeader <= Tx_desPort[16-1:8];
        end
        if ((Mac_Tx0_CNT == 3)) begin
            Mac_Tx0_UDPHeader <= Tx_desPort[8-1:0];
        end
        if ((Mac_Tx0_CNT == 4)) begin
            Mac_Tx0_UDPHeader <= Tx_UDP_Length[16-1:8];
        end
        if ((Mac_Tx0_CNT == 5)) begin
            Mac_Tx0_UDPHeader <= Tx_UDP_Length[8-1:0];
        end
        if ((Mac_Tx0_CNT == 6)) begin
            Mac_Tx0_UDPHeader <= 0;
        end
        if ((Mac_Tx0_CNT == 7)) begin
            Mac_Tx0_UDPHeader <= 0;
        end
        if ((Mac_Tx0_CNT == 6)) begin
            SendDataEn <= 1;
        end
    end
    if ((Mac_Tx0_State == 8'b00100000)) begin
        Mac_Tx0_UDPHeader <= 0;
        if ((($signed({1'b0, Mac_Tx0_CNT}) < ($signed({1'b0, TxDataLength}) - 1)) || ($signed({1'b0, Mac_Tx0_CNT}) < (18 - 1)))) begin
            Mac_Tx0_CNT <= (Mac_Tx0_CNT + 1);
        end
        else begin
            Mac_Tx0_CNT <= 0;
            Mac_Tx0_State <= 8'b01000000;
        end
        if ((Mac_Tx0_CNT < TxDataLength)) begin
            Mac_Tx0_PktData <= SendData;
        end
        else if ((Mac_Tx0_CNT >= TxDataLength)) begin
            Mac_Tx0_PktData <= 0;
        end
        if (($signed({1'b0, Mac_Tx0_CNT}) >= ($signed({1'b0, TxDataLength}) - 2))) begin
            SendDataEn <= 0;
        end
        if ((Mac_Tx0_CNT == 0)) begin
            Tx_Ram_din <= 0;
        end
        if ((Mac_Tx0_CNT == 1)) begin
            Tx_Ram_din <= MYHDL31_ToChar(TxCNT[24-1:20]);
        end
        if ((Mac_Tx0_CNT == 2)) begin
            Tx_Ram_din <= MYHDL32_ToChar(TxCNT[20-1:16]);
        end
        if ((Mac_Tx0_CNT == 3)) begin
            Tx_Ram_din <= MYHDL33_ToChar(TxCNT[16-1:12]);
        end
        if ((Mac_Tx0_CNT == 4)) begin
            Tx_Ram_din <= MYHDL34_ToChar(TxCNT[12-1:8]);
        end
        if ((Mac_Tx0_CNT == 5)) begin
            Tx_Ram_din <= MYHDL35_ToChar(TxCNT[8-1:4]);
        end
        if ((Mac_Tx0_CNT == 6)) begin
            Tx_Ram_din <= MYHDL36_ToChar(TxCNT[4-1:0]);
        end
        if (((Mac_Tx0_CNT >= 0) && (Mac_Tx0_CNT <= 6))) begin
            Tx_Ram_we <= 1;
            Tx_Ram_addr <= (Tx_Ram_addr + 1);
        end
        else begin
            Tx_Ram_we <= 0;
        end
    end
    if ((Mac_Tx0_State == 8'b01000000)) begin
        SendDataEn <= 0;
        if (($signed({1'b0, Mac_Tx0_CNT}) < ((4 + 2) - 1))) begin
            Mac_Tx0_CNT <= (Mac_Tx0_CNT + 1);
        end
        else begin
            Mac_Tx0_CNT <= 0;
            Mac_Tx0_State <= 8'b10000000;
        end
        if ((Mac_Tx0_CNT == 1)) begin
            Mac_Tx0_CrcEnable <= 0;
        end
        if ((Mac_Tx0_CNT == 4)) begin
            Mac_Tx0_TxEnReg <= 0;
        end
    end
    if ((Mac_Tx0_State == 8'b10000000)) begin
        Mac_Tx0_PktData <= 0;
        if (($signed({1'b0, Mac_Tx0_CNT}) < ((24 - 1) + TxGapLength))) begin
            Mac_Tx0_CNT <= (Mac_Tx0_CNT + 1);
        end
        else begin
            Mac_Tx0_CNT <= 0;
            Mac_Tx0_State <= 8'b00000001;
            TxEnd <= 1;
            Mac_Tx0_CrcReset <= 1;
        end
    end
    Mac_Tx0_StateReg <= Mac_Tx0_State;
    if ((Mac_Tx0_StateReg == 8'b00000001)) begin
        Mac_Tx0_TxDataReg <= 0;
    end
    if ((Mac_Tx0_StateReg == 8'b00000010)) begin
        Mac_Tx0_TxDataReg <= Mac_Tx0_EthHeader;
    end
    if ((Mac_Tx0_StateReg == 8'b00000100)) begin
        Mac_Tx0_TxDataReg <= Mac_Tx0_ARP_Data;
    end
    if ((Mac_Tx0_StateReg == 8'b00001000)) begin
        Mac_Tx0_TxDataReg <= Mac_Tx0_IPHeader;
    end
    if ((Mac_Tx0_StateReg == 8'b00010000)) begin
        Mac_Tx0_TxDataReg <= Mac_Tx0_UDPHeader;
    end
    if ((Mac_Tx0_StateReg == 8'b00100000)) begin
        Mac_Tx0_TxDataReg <= Mac_Tx0_PktData;
    end
    if ((Mac_Tx0_StateReg == 8'b01000000)) begin
        Mac_Tx0_TxDataReg <= 0;
    end
    if ((Mac_Tx0_StateReg == 8'b10000000)) begin
        Mac_Tx0_TxDataReg <= 0;
    end
    Mac_Tx0_TxEnReg1 <= Mac_Tx0_TxEnReg;
end


always @(posedge clk) begin: MAC_CTRL_MAC_TX0_SEQ1
    if (((Mac_Tx0_State == 8'b01000000) && (Mac_Tx0_CNT >= 2) && (Mac_Tx0_CNT <= 5))) begin
        if ((Mac_Tx0_CNT == 2)) begin
            TxData <= Mac_Tx0_Crc[32-1:24];
        end
        if ((Mac_Tx0_CNT == 3)) begin
            TxData <= Mac_Tx0_Crc[24-1:16];
        end
        if ((Mac_Tx0_CNT == 4)) begin
            TxData <= Mac_Tx0_Crc[16-1:8];
        end
        if ((Mac_Tx0_CNT == 5)) begin
            TxData <= Mac_Tx0_Crc[8-1:0];
        end
    end
    else begin
        TxData <= Mac_Tx0_TxDataReg;
    end
    TxEn <= Mac_Tx0_TxEnReg1;
end


always @(posedge clk) begin: MAC_CTRL_MAC_RX0_SEQ
    if ((Mac_Rx0_State == 7'b0000001)) begin
        Mac_Rx0_CNT <= 0;
        ReceiveData <= 0;
        ReceiveEn <= 0;
        Rx_Ram_we <= 0;
        Rx_Ram_addr <= 0;
        Rx_Ram_din <= 0;
        RxEnd <= 0;
        if ((Mac_Rx0_RxEnReg && (Mac_Rx0_RxDataReg == 85))) begin
            Mac_Rx0_State <= 7'b0000010;
            Mac_Rx0_CNT <= (Mac_Rx0_CNT + 1);
        end
    end
    if ((Mac_Rx0_State == 7'b0000010)) begin
        if ((Mac_Rx0_RxEnReg == 0)) begin
            Mac_Rx0_State <= 7'b0000001;
        end
        else if (($signed({1'b0, Mac_Rx0_CNT}) < (22 - 1))) begin
            Mac_Rx0_CNT <= (Mac_Rx0_CNT + 1);
        end
        else begin
            Mac_Rx0_CNT <= 0;
            if (((RxEtherType[16-1:8] == 8) && (Mac_Rx0_RxDataReg == 0))) begin
                Mac_Rx0_State <= 7'b0001000;
            end
            else if (((RxEtherType[16-1:8] == 8) && (Mac_Rx0_RxDataReg == 6))) begin
                Mac_Rx0_State <= 7'b0000100;
            end
            else begin
                Mac_Rx0_State <= 7'b0000001;
            end
        end
        if (((Mac_Rx0_CNT <= 6) && (Mac_Rx0_RxDataReg != 85))) begin
            Mac_Rx0_State <= 7'b0000001;
        end
        if (((Mac_Rx0_CNT == 7) && (Mac_Rx0_RxDataReg != 213))) begin
            Mac_Rx0_State <= 7'b0000001;
        end
        if ((Mac_Rx0_CNT == 8)) begin
            RxDestinationMAC[48-1:40] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 9)) begin
            RxDestinationMAC[40-1:32] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 10)) begin
            RxDestinationMAC[32-1:24] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 11)) begin
            RxDestinationMAC[24-1:16] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 12)) begin
            RxDestinationMAC[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 13)) begin
            RxDestinationMAC[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 14)) begin
            RxSourceMac[48-1:40] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 15)) begin
            RxSourceMac[40-1:32] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 16)) begin
            RxSourceMac[32-1:24] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 17)) begin
            RxSourceMac[24-1:16] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 18)) begin
            RxSourceMac[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 19)) begin
            RxSourceMac[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 20)) begin
            RxEtherType[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 21)) begin
            RxEtherType[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 1)) begin
            Rx_Ram_din <= 51;
        end
        if ((Mac_Rx0_CNT == 2)) begin
            Rx_Ram_din <= 89;
        end
        if ((Mac_Rx0_CNT == 3)) begin
            Rx_Ram_din <= 27;
        end
        if (((Mac_Rx0_CNT >= 1) && (Mac_Rx0_CNT <= 3))) begin
            Rx_Ram_we <= 1;
            if ((Mac_Rx0_CNT > 1)) begin
                Rx_Ram_addr <= (Rx_Ram_addr + 1);
            end
        end
        else begin
            Rx_Ram_we <= 0;
        end
    end
    if ((Mac_Rx0_State == 7'b0000100)) begin
        if ((Mac_Rx0_RxEnReg == 0)) begin
            Mac_Rx0_State <= 7'b0000001;
        end
        else if (($signed({1'b0, Mac_Rx0_CNT}) < ((28 + 4) - 1))) begin
            Mac_Rx0_CNT <= (Mac_Rx0_CNT + 1);
        end
        else begin
            Mac_Rx0_CNT <= 0;
            Mac_Rx0_State <= 7'b1000000;
        end
        if ((Mac_Rx0_CNT == 1)) begin
            Rx_Ram_din <= 34;
        end
        if ((Mac_Rx0_CNT == 2)) begin
            Rx_Ram_din <= 51;
        end
        if ((Mac_Rx0_CNT == 3)) begin
            Rx_Ram_din <= 49;
        end
        if (((Mac_Rx0_CNT >= 1) && (Mac_Rx0_CNT <= 3))) begin
            Rx_Ram_we <= 1;
            Rx_Ram_addr <= (Rx_Ram_addr + 1);
        end
        else begin
            Rx_Ram_we <= 0;
        end
    end
    if ((Mac_Rx0_State == 7'b0001000)) begin
        if ((Mac_Rx0_RxEnReg == 0)) begin
            Mac_Rx0_State <= 7'b0000001;
        end
        else if (($signed({1'b0, Mac_Rx0_CNT}) < (20 - 1))) begin
            Mac_Rx0_CNT <= (Mac_Rx0_CNT + 1);
        end
        else begin
            Mac_Rx0_CNT <= 0;
            Mac_Rx0_State <= 7'b0010000;
        end
        if ((Mac_Rx0_CNT == 0)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 1)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 2)) begin
            RxIP_Total_Length[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 3)) begin
            RxIP_Total_Length[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 4)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 5)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 6)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 7)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 8)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 9)) begin
            Rx_IP_Protocol <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 10)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 11)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 12)) begin
            RxSourceIP[32-1:24] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 13)) begin
            RxSourceIP[24-1:16] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 14)) begin
            RxSourceIP[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 15)) begin
            RxSourceIP[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 16)) begin
            RxDestinationIP[32-1:24] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 17)) begin
            RxDestinationIP[24-1:16] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 18)) begin
            RxDestinationIP[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 19)) begin
            RxDestinationIP[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 10)) begin
            if ((Rx_IP_Protocol == 6)) begin
                Rx_Ram_din <= 53;
            end
            else begin
                if ((Rx_IP_Protocol == 17)) begin
                    Rx_Ram_din <= 54;
                end
                else begin
                    Rx_Ram_din <= 57;
                end
            end
        end
        if ((Mac_Rx0_CNT == 11)) begin
            if ((Rx_IP_Protocol == 6)) begin
                Rx_Ram_din <= 36;
            end
            else begin
                if ((Rx_IP_Protocol == 17)) begin
                    Rx_Ram_din <= 37;
                end
                else begin
                    Rx_Ram_din <= 57;
                end
            end
        end
        if (((Mac_Rx0_CNT >= 10) && (Mac_Rx0_CNT <= 11))) begin
            Rx_Ram_we <= 1;
            Rx_Ram_addr <= (Rx_Ram_addr + 1);
        end
        else begin
            Rx_Ram_we <= 0;
        end
    end
    if ((Mac_Rx0_State == 7'b0010000)) begin
        if ((Mac_Rx0_RxEnReg == 0)) begin
            Mac_Rx0_State <= 7'b0000001;
        end
        else if (($signed({1'b0, Mac_Rx0_CNT}) < (8 - 1))) begin
            Mac_Rx0_CNT <= (Mac_Rx0_CNT + 1);
        end
        else begin
            Mac_Rx0_CNT <= 0;
            Mac_Rx0_State <= 7'b0100000;
        end
        if ((Mac_Rx0_CNT == 0)) begin
            Rx_srcPort[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 1)) begin
            Rx_srcPort[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 2)) begin
            Rx_desPort[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 3)) begin
            Rx_desPort[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 4)) begin
            Rx_UDP_Length[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 5)) begin
            Rx_UDP_Length[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 6)) begin
            // pass
        end
        if ((Mac_Rx0_CNT == 7)) begin
            // pass
        end
    end
    if ((Mac_Rx0_State == 7'b0100000)) begin
        if ((Mac_Rx0_RxEnReg == 0)) begin
            Mac_Rx0_State <= 7'b0000001;
        end
        else if (($signed({1'b0, Mac_Rx0_CNT}) < ((($signed({1'b0, Rx_UDP_Length}) - 8) + 4) - 1))) begin
            Mac_Rx0_CNT <= (Mac_Rx0_CNT + 1);
        end
        else begin
            Mac_Rx0_CNT <= 0;
            Mac_Rx0_State <= 7'b1000000;
        end
        if (($signed({1'b0, Mac_Rx0_CNT}) < ($signed({1'b0, Rx_UDP_Length}) - 8))) begin
            ReceiveData <= Mac_Rx0_RxDataReg;
            ReceiveEn <= 1;
        end
        else begin
            ReceiveEn <= 0;
            ReceiveData <= 0;
        end
        if ((Mac_Rx0_CNT == 0)) begin
            Mac_Rx0_RxText[32-1:24] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 1)) begin
            Mac_Rx0_RxText[24-1:16] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 2)) begin
            Mac_Rx0_RxText[16-1:8] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 3)) begin
            Mac_Rx0_RxText[8-1:0] <= Mac_Rx0_RxDataReg;
        end
        if ((Mac_Rx0_CNT == 0)) begin
            Rx_Ram_din <= 0;
        end
        if ((Mac_Rx0_CNT == 1)) begin
            Rx_Ram_din <= MYHDL39_ToChar(Mac_Rx0_RxText[32-1:28]);
        end
        if ((Mac_Rx0_CNT == 2)) begin
            Rx_Ram_din <= MYHDL40_ToChar(Mac_Rx0_RxText[28-1:24]);
        end
        if ((Mac_Rx0_CNT == 3)) begin
            Rx_Ram_din <= MYHDL41_ToChar(Mac_Rx0_RxText[24-1:20]);
        end
        if ((Mac_Rx0_CNT == 4)) begin
            Rx_Ram_din <= MYHDL42_ToChar(Mac_Rx0_RxText[20-1:16]);
        end
        if ((Mac_Rx0_CNT == 5)) begin
            Rx_Ram_din <= MYHDL43_ToChar(Mac_Rx0_RxText[16-1:12]);
        end
        if ((Mac_Rx0_CNT == 6)) begin
            Rx_Ram_din <= MYHDL44_ToChar(Mac_Rx0_RxText[12-1:8]);
        end
        if ((Mac_Rx0_CNT == 7)) begin
            Rx_Ram_din <= MYHDL45_ToChar(Mac_Rx0_RxText[8-1:4]);
        end
        if ((Mac_Rx0_CNT == 8)) begin
            Rx_Ram_din <= MYHDL46_ToChar(Mac_Rx0_RxText[4-1:0]);
        end
        if (((Mac_Rx0_CNT >= 0) && (Mac_Rx0_CNT <= 8))) begin
            Rx_Ram_we <= 1;
            Rx_Ram_addr <= (Rx_Ram_addr + 1);
        end
        else begin
            Rx_Ram_we <= 0;
        end
    end
    if ((Mac_Rx0_State == 7'b1000000)) begin
        Rx_Ram_we <= 0;
        if (($signed({1'b0, Mac_Rx0_CNT}) < (24 - 7))) begin
            Mac_Rx0_CNT <= (Mac_Rx0_CNT + 1);
        end
        else begin
            Mac_Rx0_CNT <= 0;
            Mac_Rx0_State <= 7'b0000001;
            RxEnd <= 1;
        end
    end
    Mac_Rx0_RxEnReg <= RxEn;
    Mac_Rx0_RxDataReg <= RxData;
end


always @(posedge clk) begin: MAC_CTRL_TXPIC0_SEQ
    if ((TxPic0_State == 5'b00001)) begin
        PicTxEn <= 0;
        TxPic0_PktCNT <= 0;
        TxPic0_EndCNT <= 0;
        PicGapLength <= 0;
        TxPic0_EndPktCNT <= 0;
        PixTxing <= 0;
        TxPic0_CNTx3 <= 0;
        TxPic0_X <= 0;
        TxPic0_Y <= 0;
        if (((RxEnd == 1) && (Rx_IP_Protocol == 17) && (Rx_desPort == 57766) && (RxDataLength == 7))) begin
            TxPic0_State <= 5'b00100;
            PixTxing <= 1;
        end
    end
    if ((TxPic0_State == 5'b00100)) begin
        PicTxDataLength <= 1024;
        if ((TxIDLE && (TxPic0_PktCNT < 1536))) begin
            PicTxEn <= 1;
            TxPic0_State <= 5'b01000;
        end
        else begin
            if ((TxPic0_PktCNT == 1536)) begin
                TxPic0_State <= 5'b10000;
                TxPic0_PktCNT <= 0;
            end
            PicTxEn <= 0;
        end
    end
    if ((TxPic0_State == 5'b01000)) begin
        PicTxEn <= 0;
        TxPic0_TxingCNT <= (TxPic0_TxingCNT + 1);
        if (((TxPic0_TxingCNT > 64) && (TxIDLE == 1))) begin
            TxPic0_State <= 5'b00100;
            TxPic0_PktCNT <= (TxPic0_PktCNT + 1);
            TxPic0_TxingCNT <= 0;
            if ((TxPic0_CNTy3 == 2)) begin
                TxPic0_CNTy3 <= 0;
                TxPic0_Y <= (TxPic0_Y + 1);
            end
            else begin
                TxPic0_CNTy3 <= (TxPic0_CNTy3 + 1);
            end
        end
        if (SendDataEn) begin
            if ((TxPic0_CNTx3 == 2)) begin
                TxPic0_CNTx3 <= 0;
                if (($signed({1'b0, TxPic0_X}) == (1024 - 1))) begin
                    TxPic0_X <= 0;
                end
                else begin
                    TxPic0_X <= (TxPic0_X + 1);
                end
            end
            else begin
                TxPic0_CNTx3 <= (TxPic0_CNTx3 + 1);
            end
        end
    end
    if ((TxPic0_State == 5'b10000)) begin
        TxPic0_Y <= 0;
        PicTxDataLength <= 1;
        PicGapLength <= 1024;
        TxPic0_EndCNT <= (TxPic0_EndCNT + 1);
        if (((TxPic0_EndCNT > 1024) && TxIDLE && (TxPic0_EndPktCNT < 2))) begin
            PicTxEn <= 1;
        end
        else begin
            PicTxEn <= 0;
        end
        if ((TxEnd == 1)) begin
            TxPic0_EndPktCNT <= (TxPic0_EndPktCNT + 1);
        end
        if ((TxIDLE && (TxPic0_EndPktCNT >= 2))) begin
            TxPic0_State <= 5'b00001;
            TxPic0_FrameCNT <= (TxPic0_FrameCNT + 1);
            PicTxEn <= 0;
            TxPic0_EndPktCNT <= 0;
            TxPic0_FrameRateCNT <= (TxPic0_FrameRateCNT + 1);
            if ((TxPic0_FrameCNT > 20)) begin
                if ((TxPic0_Rect1Size_W < 10)) begin
                    TxPic0_Rect1Size_W <= 1024;
                end
                else begin
                    TxPic0_Rect1Size_W <= (TxPic0_Rect1Size_W - 5);
                end
            end
        end
    end
    if (($signed({1'b0, TxPic0_CNT1S}) == (125000000 - 1))) begin
        TxPic0_CNT1S <= 0;
        TxPic0_FrameRateCNT <= 0;
        FrameRate <= TxPic0_FrameRateCNT;
    end
    else begin
        TxPic0_CNT1S <= (TxPic0_CNT1S + 1);
    end
end


always @(posedge clk) begin: MAC_CTRL_TXPIC0_RECTANGLE2_SEQ
    if (((TxPic0_Rectangle2_x < TxPic0_Rect1Size_W) && (TxPic0_Rectangle2_y < TxPic0_Rectangle2_Size_H))) begin
        if ((((TxPic0_Rectangle2_y <= 0) || ($signed({1'b0, TxPic0_Rectangle2_y}) >= (($signed({1'b0, TxPic0_Rectangle2_Size_H}) - 0) - 1))) || ((TxPic0_Rectangle2_x <= 0) || ($signed({1'b0, TxPic0_Rectangle2_x}) >= (($signed({1'b0, TxPic0_Rect1Size_W}) - 0) - 1))))) begin
            TxPic0_Rect1OColor_R <= TxPic0_Rectangle2_LineColor_R;
            TxPic0_Rect1OColor_G <= TxPic0_Rectangle2_LineColor_G;
            TxPic0_Rect1OColor_B <= TxPic0_Rectangle2_LineColor_B;
            TxPic0_Rect1OEn <= 1;
        end
        else if ((TxPic0_Rectangle2_NoFill == 0)) begin
            TxPic0_Rect1OColor_R <= TxPic0_Rectangle2_FillColor_R;
            TxPic0_Rect1OColor_G <= TxPic0_Rectangle2_FillColor_G;
            TxPic0_Rect1OColor_B <= TxPic0_Rectangle2_FillColor_B;
            TxPic0_Rect1OEn <= 1;
        end
        else begin
            TxPic0_Rect1OEn <= 0;
            TxPic0_Rect1OColor_R <= 0;
            TxPic0_Rect1OColor_G <= 0;
            TxPic0_Rect1OColor_B <= 0;
        end
    end
    else begin
        TxPic0_Rect1OEn <= 0;
        TxPic0_Rect1OColor_R <= 0;
        TxPic0_Rect1OColor_G <= 0;
        TxPic0_Rect1OColor_B <= 0;
    end
end


always @(TxPic0_Y, TxPic0_Rectangle2_Loc_y, TxPic0_Rectangle2_FillColor_G, TxPic0_Rectangle2_FillColor_R, TxPic0_Rectangle2_Loc_x, TxPic0_X, TxPic0_Rectangle2_FillColor_B) begin: MAC_CTRL_TXPIC0_RECTANGLE2_COMB
    if (((TxPic0_Rectangle2_FillColor_R == 0) && (TxPic0_Rectangle2_FillColor_G == 0) && (TxPic0_Rectangle2_FillColor_B == 0))) begin
        TxPic0_Rectangle2_NoFill = 1;
    end
    else begin
        TxPic0_Rectangle2_NoFill = 0;
    end
    TxPic0_Rectangle2_x = (TxPic0_X - TxPic0_Rectangle2_Loc_x);
    TxPic0_Rectangle2_y = (TxPic0_Y - TxPic0_Rectangle2_Loc_y);
end


always @(TxPic0_Rect1OColor_G, TxPic0_Rect1OColor_R, TxPic0_CNTx3, TxPic0_Rect1OColor_B, PixTxing) begin: MAC_CTRL_TXPIC0_ASSIGN
    if (PixTxing) begin
        Tx_desPort = 57788;
    end
    if ((TxPic0_CNTx3 == 1)) begin
        PicTxData = TxPic0_Rect1OColor_R;
    end
    if ((TxPic0_CNTx3 == 2)) begin
        PicTxData = TxPic0_Rect1OColor_G;
    end
    if ((TxPic0_CNTx3 == 0)) begin
        PicTxData = TxPic0_Rect1OColor_B;
    end
end

endmodule
