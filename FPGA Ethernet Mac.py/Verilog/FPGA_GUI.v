// File: FPGA_GUI.v
// Generated by MyHDL 0.10
// Date: Tue Jul 17 08:58:23 2018


`timescale 1ns/10ps

module FPGA_GUI (
    clk,
    X_5,
    Y,
    Width,
    Height,
    Clear,
    Dkey1Down,
    Arbiter0_RGBO_R,
    Arbiter0_RGBO_G,
    Arbiter0_RGBO_B,
    Char0_Rom_we,
    Char0_Rom_addr,
    Char0_Rom_din,
    Char0_Rom_dout,
    TextBox0_Ram_we,
    TextBox0_Ram_addr,
    TextBox0_Ram_din,
    TextBox0_Ram_dout
);


input clk;
input [11:0] X_5;
input [11:0] Y;
input [11:0] Width;
input [11:0] Height;
input Clear;
input Dkey1Down;
output [7:0] Arbiter0_RGBO_R;
reg [7:0] Arbiter0_RGBO_R;
output [7:0] Arbiter0_RGBO_G;
reg [7:0] Arbiter0_RGBO_G;
output [7:0] Arbiter0_RGBO_B;
reg [7:0] Arbiter0_RGBO_B;
output Char0_Rom_we;
reg Char0_Rom_we;
output [10:0] Char0_Rom_addr;
reg [10:0] Char0_Rom_addr;
output [15:0] Char0_Rom_din;
wire [15:0] Char0_Rom_din;
input [15:0] Char0_Rom_dout;
output TextBox0_Ram_we;
reg TextBox0_Ram_we;
output [10:0] TextBox0_Ram_addr;
reg [10:0] TextBox0_Ram_addr;
output [8:0] TextBox0_Ram_din;
reg [8:0] TextBox0_Ram_din;
input [8:0] TextBox0_Ram_dout;

reg OEnLabel1 = 0;
reg OEnChar = 0;
reg OEnRect2 = 0;
reg OEnRect1 = 0;
reg [7:0] charTextBox = 0;
reg [7:0] charLabel1 = 0;
reg [7:0] char = 0;
reg [11:0] X_3 = 0;
reg [11:0] X_2 = 0;
reg [11:0] X_1 = 0;
reg OEnTextBox = 0;
reg [7:0] Rect2bgColor_R = 0;
reg [7:0] Rect2bgColor_G = 0;
reg [7:0] Rect2bgColor_B = 0;
reg [11:0] Rect1Size_W = 0;
reg [11:0] Rect1Size_H = 0;
reg [11:0] charLoc_x = 2000;
reg [11:0] charLocTextBox_x = 2000;
reg [11:0] charLoc_y = 2000;
reg [11:0] charLocTextBox_y = 2000;
reg [7:0] charColor_R = 0;
wire [7:0] charColorTextBox_R;
reg [7:0] charColor_G = 0;
wire [7:0] charColorTextBox_G;
reg [7:0] charColor_B = 0;
wire [7:0] charColorTextBox_B;
reg [11:0] charLocLabel1_x = 2000;
reg [11:0] charLocLabel1_y = 2000;
wire [7:0] charColorLabel1_R;
wire [7:0] charColorLabel1_G;
wire [7:0] charColorLabel1_B;
reg [11:0] Rectangle0_y = 0;
reg [11:0] Rectangle0_x = 0;
reg Rectangle0_NoFill = 0;
wire [1:0] Rectangle0_LineWidth;
reg [7:0] Rectangle0_OColor_R = 0;
wire [7:0] Rectangle0_LineColor_R;
reg [7:0] Rectangle0_OColor_G = 0;
wire [7:0] Rectangle0_LineColor_G;
reg [7:0] Rectangle0_OColor_B = 0;
wire [7:0] Rectangle0_LineColor_B;
wire [7:0] Rectangle0_FillColor_R;
wire [7:0] Rectangle0_FillColor_G;
wire [7:0] Rectangle0_FillColor_B;
wire [11:0] Rectangle0_Loc_x;
wire [11:0] Rectangle0_Loc_y;
reg [11:0] Rectangle1_y = 0;
reg [11:0] Rectangle1_x = 0;
reg Rectangle1_NoFill = 0;
wire [1:0] Rectangle1_LineWidth;
wire [11:0] Rectangle1_Size_W;
wire [11:0] Rectangle1_Size_H;
reg [7:0] Rectangle1_OColor_R = 0;
wire [7:0] Rectangle1_LineColor_R;
reg [7:0] Rectangle1_OColor_G = 0;
wire [7:0] Rectangle1_LineColor_G;
reg [7:0] Rectangle1_OColor_B = 0;
wire [7:0] Rectangle1_LineColor_B;
wire [11:0] Rectangle1_Loc_x;
wire [11:0] Rectangle1_Loc_y;
wire [11:0] Char0_y;
reg [11:0] Char0_x1 = 0;
wire [11:0] Char0_x;
wire Char0_Start;
reg [14:0] Char0_SF15 = 0;
reg [7:0] Char0_OColor_R = 0;
reg [7:0] Char0_OColor_G = 0;
reg [7:0] Char0_OColor_B = 0;
wire [11:0] Label0_y;
wire [11:0] Label0_x;
wire [11:0] Label0_Loc_x;
wire [11:0] Label0_Loc_y;
wire [11:0] TextBox0_y;
wire [11:0] TextBox0_x;
wire [11:0] TextBox0_rowNum;
reg [11:0] TextBox0_clrCNT = 0;
wire [11:0] TextBox0_Loc_x;
wire [11:0] TextBox0_Loc_y;
wire [7:0] TextBox0_TextColor_R;
wire [7:0] TextBox0_TextColor_G;
wire [7:0] TextBox0_TextColor_B;
wire Arbiter0_En5;
wire Arbiter0_En4;
wire Arbiter0_En3;
wire [7:0] Arbiter0_C3_R;
wire [7:0] Arbiter0_C3_G;
wire [7:0] Arbiter0_C3_B;
wire [7:0] Arbiter0_C4_R;
wire [7:0] Arbiter0_C4_G;
wire [7:0] Arbiter0_C4_B;
wire [7:0] Arbiter0_C5_R;
wire [7:0] Arbiter0_C5_G;
wire [7:0] Arbiter0_C5_B;
wire [7:0] Arbiter0_bgColor_R;
wire [7:0] Arbiter0_bgColor_G;
wire [7:0] Arbiter0_bgColor_B;
wire [7:0] iLabel1Text [0:5-1];

assign iLabel1Text[0] = 36, //'Clear' 这几个初始值需要自己手动添加
       iLabel1Text[1] = 77,
       iLabel1Text[2] = 70,
       iLabel1Text[3] = 66,   
       iLabel1Text[4] = 83;

assign Rectangle0_LineWidth = 2'd0;
assign Rectangle0_LineColor_R = 8'd0;
assign Rectangle0_LineColor_G = 8'd0;
assign Rectangle0_LineColor_B = 8'd255;
assign Rectangle0_FillColor_R = 8'd0;
assign Rectangle0_FillColor_G = 8'd0;
assign Rectangle0_FillColor_B = 8'd0;
assign Rectangle0_Loc_x = 12'd0;
assign Rectangle0_Loc_y = 12'd0;
assign Rectangle1_LineWidth = 2'd0;
assign Rectangle1_Size_W = 12'd100;
assign Rectangle1_Size_H = 12'd24;
assign Rectangle1_LineColor_R = 8'd255;
assign Rectangle1_LineColor_G = 8'd0;
assign Rectangle1_LineColor_B = 8'd0;
assign Rectangle1_Loc_x = 12'd6;
assign Rectangle1_Loc_y = 12'd8;
assign Label0_Loc_x = 12'd16;
assign Label0_Loc_y = 12'd12;
assign TextBox0_Loc_x = 12'd6;
assign TextBox0_Loc_y = 12'd38;
assign TextBox0_TextColor_R = 8'd0;
assign TextBox0_TextColor_G = 8'd255;
assign TextBox0_TextColor_B = 8'd0;
assign Arbiter0_En5 = 1'd0;
assign Arbiter0_En4 = 1'd0;
assign Arbiter0_En3 = 1'd0;
assign Arbiter0_C3_R = 8'd0;
assign Arbiter0_C3_G = 8'd0;
assign Arbiter0_C3_B = 8'd0;
assign Arbiter0_C4_R = 8'd0;
assign Arbiter0_C4_G = 8'd0;
assign Arbiter0_C4_B = 8'd0;
assign Arbiter0_C5_R = 8'd0;
assign Arbiter0_C5_G = 8'd0;
assign Arbiter0_C5_B = 8'd0;
assign Arbiter0_bgColor_R = 8'd0;
assign Arbiter0_bgColor_G = 8'd0;
assign Arbiter0_bgColor_B = 8'd0;


always @(posedge clk) begin: FPGA_GUI_RECTANGLE0_SEQ
    if (((Rectangle0_x < Rect1Size_W) && (Rectangle0_y < Rect1Size_H))) begin
        if ((((Rectangle0_y <= Rectangle0_LineWidth) || ($signed({1'b0, Rectangle0_y}) >= (($signed({1'b0, Rect1Size_H}) - $signed({1'b0, Rectangle0_LineWidth})) - 1))) || ((Rectangle0_x <= Rectangle0_LineWidth) || ($signed({1'b0, Rectangle0_x}) >= (($signed({1'b0, Rect1Size_W}) - $signed({1'b0, Rectangle0_LineWidth})) - 1))))) begin
            Rectangle0_OColor_R <= Rectangle0_LineColor_R;
            Rectangle0_OColor_G <= Rectangle0_LineColor_G;
            Rectangle0_OColor_B <= Rectangle0_LineColor_B;
            OEnRect1 <= 1;
        end
        else if ((Rectangle0_NoFill == 0)) begin
            Rectangle0_OColor_R <= Rectangle0_FillColor_R;
            Rectangle0_OColor_G <= Rectangle0_FillColor_G;
            Rectangle0_OColor_B <= Rectangle0_FillColor_B;
            OEnRect1 <= 1;
        end
        else begin
            OEnRect1 <= 0;
            Rectangle0_OColor_R <= 0;
            Rectangle0_OColor_G <= 0;
            Rectangle0_OColor_B <= 0;
        end
    end
    else begin
        OEnRect1 <= 0;
        Rectangle0_OColor_R <= 0;
        Rectangle0_OColor_G <= 0;
        Rectangle0_OColor_B <= 0;
    end
end


always @(Rectangle0_FillColor_B, X_3, Rectangle0_FillColor_R, Rectangle0_FillColor_G, Y, Rectangle0_Loc_x, Rectangle0_Loc_y) begin: FPGA_GUI_RECTANGLE0_COMB
    if (((Rectangle0_FillColor_R == 0) && (Rectangle0_FillColor_G == 0) && (Rectangle0_FillColor_B == 0))) begin
        Rectangle0_NoFill = 1;
    end
    else begin
        Rectangle0_NoFill = 0;
    end
    Rectangle0_x = (X_3 - Rectangle0_Loc_x);
    Rectangle0_y = (Y - Rectangle0_Loc_y);
end


always @(posedge clk) begin: FPGA_GUI_RECTANGLE1_SEQ
    if (((Rectangle1_x < Rectangle1_Size_W) && (Rectangle1_y < Rectangle1_Size_H))) begin
        if ((((Rectangle1_y <= Rectangle1_LineWidth) || ($signed({1'b0, Rectangle1_y}) >= (($signed({1'b0, Rectangle1_Size_H}) - $signed({1'b0, Rectangle1_LineWidth})) - 1))) || ((Rectangle1_x <= Rectangle1_LineWidth) || ($signed({1'b0, Rectangle1_x}) >= (($signed({1'b0, Rectangle1_Size_W}) - $signed({1'b0, Rectangle1_LineWidth})) - 1))))) begin
            Rectangle1_OColor_R <= Rectangle1_LineColor_R;
            Rectangle1_OColor_G <= Rectangle1_LineColor_G;
            Rectangle1_OColor_B <= Rectangle1_LineColor_B;
            OEnRect2 <= 1;
        end
        else if ((Rectangle1_NoFill == 0)) begin
            Rectangle1_OColor_R <= Rect2bgColor_R;
            Rectangle1_OColor_G <= Rect2bgColor_G;
            Rectangle1_OColor_B <= Rect2bgColor_B;
            OEnRect2 <= 1;
        end
        else begin
            OEnRect2 <= 0;
            Rectangle1_OColor_R <= 0;
            Rectangle1_OColor_G <= 0;
            Rectangle1_OColor_B <= 0;
        end
    end
    else begin
        OEnRect2 <= 0;
        Rectangle1_OColor_R <= 0;
        Rectangle1_OColor_G <= 0;
        Rectangle1_OColor_B <= 0;
    end
end


always @(Rect2bgColor_B, X_3, Rect2bgColor_R, Rect2bgColor_G, Y, Rectangle1_Loc_x, Rectangle1_Loc_y) begin: FPGA_GUI_RECTANGLE1_COMB
    if (((Rect2bgColor_R == 0) && (Rect2bgColor_G == 0) && (Rect2bgColor_B == 0))) begin
        Rectangle1_NoFill = 1;
    end
    else begin
        Rectangle1_NoFill = 0;
    end
    Rectangle1_x = (X_3 - Rectangle1_Loc_x);
    Rectangle1_y = (Y - Rectangle1_Loc_y);
end


always @(posedge clk) begin: FPGA_GUI_CHAR0_SEQ
    Char0_x1 <= Char0_x;
    if (((Char0_x1 == 0) && (Char0_y < 16))) begin
        Char0_SF15 <= Char0_Rom_dout[15-1:0];
        if (Char0_Rom_dout[15]) begin
            OEnChar <= 1;
            Char0_OColor_R <= charColor_R;
            Char0_OColor_G <= charColor_G;
            Char0_OColor_B <= charColor_B;
        end
        else begin
            OEnChar <= 0;
        end
    end
    else if (((Char0_x1 > 0) && (Char0_x1 < 16) && (Char0_y < 16))) begin
        Char0_SF15[15-1:1] <= Char0_SF15[14-1:0];
        if (Char0_SF15[14]) begin
            OEnChar <= 1;
            Char0_OColor_R <= charColor_R;
            Char0_OColor_G <= charColor_G;
            Char0_OColor_B <= charColor_B;
        end
        else begin
            OEnChar <= 0;
        end
    end
    else begin
        OEnChar <= 0;
    end
end



assign Char0_x = (X_2 - charLoc_x);
assign Char0_y = (Y - charLoc_y);


always @(char, Char0_Start, Char0_y) begin: FPGA_GUI_CHAR0_COMB2
    Char0_Rom_we = Char0_Start;
    if (((Char0_y < 16) && (Char0_Start == 1))) begin
        Char0_Rom_addr = ((char << 4) + Char0_y);
    end
end



assign Char0_Start = ((Char0_x == 0) && (Char0_y < 16));
assign Char0_Rom_din = 0;


always @(posedge clk) begin: FPGA_GUI_LABEL0_SEQ
    if ((((Label0_x[4-1:0] == 0) && ((Label0_x >>> 4) < 5)) && (Label0_y < 16))) begin
        charLocLabel1_x <= (Label0_Loc_x + Label0_x);
        charLocLabel1_y <= Label0_Loc_y;
    end
    if ((((Label0_x >>> 4) < 5) && (Label0_y < 16))) begin
        OEnLabel1 <= 1;
        charLabel1 <= iLabel1Text[(Label0_x >>> 4)];
    end
    else begin
        OEnLabel1 <= 0;
    end
end



assign Label0_x = (X_1 - Label0_Loc_x);
assign Label0_y = (Y - Label0_Loc_y);
assign charColorLabel1_R = Rectangle1_LineColor_R;
assign charColorLabel1_G = Rectangle1_LineColor_G;
assign charColorLabel1_B = Rectangle1_LineColor_B;


always @(posedge clk) begin: FPGA_GUI_TEXTBOX0_SEQ
    if ((((TextBox0_x[4-1:0] == 0) && ((TextBox0_x >>> 4) < 64)) && (TextBox0_y < (16 * 32)))) begin
        charLocTextBox_x <= (TextBox0_Loc_x + TextBox0_x);
        charLocTextBox_y <= (TextBox0_Loc_y + (TextBox0_rowNum << 4));
    end
    if ((((TextBox0_x >>> 4) < 64) && (TextBox0_y < (16 * 32)))) begin
        OEnTextBox <= 1;
    end
    else begin
        OEnTextBox <= 0;
    end
    if ((TextBox0_clrCNT == 2048)) begin
        TextBox0_clrCNT <= 0;
    end
    else if ((Clear || (TextBox0_clrCNT > 0))) begin
        TextBox0_clrCNT <= (TextBox0_clrCNT + 1);
    end
    else begin
        TextBox0_clrCNT <= 0;
    end
end



assign TextBox0_x = (X_1 - TextBox0_Loc_x);
assign TextBox0_y = (Y - TextBox0_Loc_y);
assign charColorTextBox_R = TextBox0_TextColor_R;
assign charColorTextBox_G = TextBox0_TextColor_G;
assign charColorTextBox_B = TextBox0_TextColor_B;



assign TextBox0_rowNum = (TextBox0_y >>> 4);


always @(TextBox0_clrCNT, TextBox0_x, TextBox0_Ram_dout, TextBox0_rowNum) begin: FPGA_GUI_TEXTBOX0_COMB2
    if ((TextBox0_clrCNT > 0)) begin
        TextBox0_Ram_we = 1;
        TextBox0_Ram_addr = (TextBox0_clrCNT - 1);
    end
    else begin
        TextBox0_Ram_addr = ((TextBox0_x >>> 4) + (TextBox0_rowNum << 6));
        TextBox0_Ram_we = 0;
    end
    charTextBox = TextBox0_Ram_dout[8-1:0];
    TextBox0_Ram_din = 0;
end


always @(posedge clk) begin: FPGA_GUI_ARBITER0_SEQ
    if (OEnChar) begin
        Arbiter0_RGBO_R <= Char0_OColor_R;
        Arbiter0_RGBO_G <= Char0_OColor_G;
        Arbiter0_RGBO_B <= Char0_OColor_B;
    end
    else if (OEnRect1) begin
        Arbiter0_RGBO_R <= Rectangle0_OColor_R;
        Arbiter0_RGBO_G <= Rectangle0_OColor_G;
        Arbiter0_RGBO_B <= Rectangle0_OColor_B;
    end
    else if (OEnRect2) begin
        Arbiter0_RGBO_R <= Rectangle1_OColor_R;
        Arbiter0_RGBO_G <= Rectangle1_OColor_G;
        Arbiter0_RGBO_B <= Rectangle1_OColor_B;
    end
    else if (Arbiter0_En3) begin
        Arbiter0_RGBO_R <= Arbiter0_C3_R;
        Arbiter0_RGBO_G <= Arbiter0_C3_G;
        Arbiter0_RGBO_B <= Arbiter0_C3_B;
    end
    else if (Arbiter0_En4) begin
        Arbiter0_RGBO_R <= Arbiter0_C4_R;
        Arbiter0_RGBO_G <= Arbiter0_C4_G;
        Arbiter0_RGBO_B <= Arbiter0_C4_B;
    end
    else if (Arbiter0_En5) begin
        Arbiter0_RGBO_R <= Arbiter0_C5_R;
        Arbiter0_RGBO_G <= Arbiter0_C5_G;
        Arbiter0_RGBO_B <= Arbiter0_C5_B;
    end
    else begin
        Arbiter0_RGBO_R <= Arbiter0_bgColor_R;
        Arbiter0_RGBO_G <= Arbiter0_bgColor_G;
        Arbiter0_RGBO_B <= Arbiter0_bgColor_B;
    end
end


always @(posedge clk) begin: FPGA_GUI_SEQ
    if (Dkey1Down) begin
        Rect2bgColor_R <= 128;
        Rect2bgColor_G <= 0;
        Rect2bgColor_B <= 0;
    end
    else if (Clear) begin
        Rect2bgColor_R <= 0;
        Rect2bgColor_G <= 0;
        Rect2bgColor_B <= 0;
    end
end


always @(charLocLabel1_y, charLocTextBox_y, charColorTextBox_B, charLocLabel1_x, charLocTextBox_x, charColorTextBox_R, charLabel1, charColorLabel1_R, charColorLabel1_B, charColorTextBox_G, Height, charColorLabel1_G, Width, X_5, OEnTextBox, charTextBox) begin: FPGA_GUI_COMB
    X_3 = (X_5 - 3);
    X_2 = (X_5 - 2);
    X_1 = (X_5 - 1);
    Rect1Size_W = Width;
    Rect1Size_H = Height;
    if (OEnTextBox) begin
        charLoc_x = charLocTextBox_x;
        charLoc_y = charLocTextBox_y;
        char = charTextBox;
        charColor_R = charColorTextBox_R;
        charColor_G = charColorTextBox_G;
        charColor_B = charColorTextBox_B;
    end
    else begin
        charLoc_x = charLocLabel1_x;
        charLoc_y = charLocLabel1_y;
        char = charLabel1;
        charColor_R = charColorLabel1_R;
        charColor_G = charColorLabel1_G;
        charColor_B = charColorLabel1_B;
    end
end

endmodule
